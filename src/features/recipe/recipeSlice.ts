import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState, AppThunk } from '../../app/store'
import { recipesCol } from '../../db/recipes'
import { listRecipes, createRecipe } from './recipeAPI'

export interface RecipeState {
  name: string
}

const initialState: RecipeState = {
  name: '',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const setRecipe = createAsyncThunk('recipe/createRecipe', async (name: string) => {
  const response = await createRecipe(name)
  // The value we return becomes the `fulfilled` action payload
  return response.data
})

export const getIngredients = createAsyncThunk('ingredient/listRecipe', async (name: string) => {
  const response = await listRecipes()
  // The value we return becomes the `fulfilled` action payload
  return response.data
})

export const recipeSlice = createSlice({
  name: 'recipe',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
})

export const {} = recipeSlice.actions

export default recipeSlice.reducer
