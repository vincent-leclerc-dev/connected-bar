import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState, AppThunk } from '../../app/store'
import { Ingredient } from '../../types/Ingredient'
import { listIngredients, createIngredient } from './ingredientAPI'

export interface IngredientState {
  ingredients: Ingredient[]
}

const initialState: IngredientState = {
  ingredients: [],
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const setIngredient = createAsyncThunk(
  'ingredients/createIngredient',
  async (name: string) => {
    const response = await createIngredient(name)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  },
)

export const getIngredients = createAsyncThunk('ingredients/getIngredients', async () => {
  const response = await listIngredients()
  // The value we return becomes the `fulfilled` action payload

  return response.docs.map((o) => o.data())
})

export const ingredientSlice = createSlice({
  name: 'ingredients',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getIngredients.fulfilled, (state, action) => {
      console.log(action.payload)
      state.ingredients = action.payload.map((o) => o)
    })
  },
})

// export const {} = ingredientSlice.actions

export default ingredientSlice.reducer
